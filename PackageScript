# vim: set ts=2 sw=2 tw=99 noet ft=python: 
import os

builder.SetBuildFolder('package')

folder_map = {}

# Do all straight-up file copies from the source tree.
def CopyFiles(src, dest, list_objs):
  if not dest:
    dest = src
  for obj in list_objs:
    full_obj = os.path.join(builder.sourcePath, src, obj)
    if(os.path.isdir(full_obj)):
      abs_full_obj = os.path.abspath(full_obj)
      for root, subdirs, files in os.walk(full_obj):
        subdir = os.path.relpath(root, abs_full_obj)
        full_dist_dir = os.path.join(dest, obj, subdir)
        for file in files:
          dest_entry = None
          if full_dist_dir in folder_map:
            dest_entry = folder_map[full_dist_dir]
          else:
            dest_entry = folder_map[full_dist_dir] = builder.AddFolder(full_dist_dir)
          builder.AddCopy(os.path.join(builder.sourcePath, src, obj, subdir, file), dest_entry)
    else: # Is file.
      dest_entry = None
      if dest in folder_map:
        dest_entry = folder_map[dest]
      else:
        dest_entry = folder_map[dest] = builder.AddFolder(dest)

      builder.AddCopy(full_obj, dest_entry)

# Package Configs files.
CopyFiles('configs', os.path.join('addons', EntityManager.plugin_name, 'configs'),
 [ 'spawngroups', ]
)

# Package GameData files.
CopyFiles('gamedata', os.path.join('addons', EntityManager.plugin_name, 'gamedata'),
  [
    'entitykeyvalues.games.txt',
    'entitysystem.games.txt',
    'gameresource.games.txt',
    'spawngroup.games.txt',
  ]
)

metamod_folder = builder.AddFolder(os.path.join('addons', 'metamod'))
bin_folder_path = os.path.join('addons', EntityManager.plugin_name, 'bin')
bin_folder = builder.AddFolder(bin_folder_path)

for cxx in EntityManager.all_targets:
  if cxx.target.arch == 'x86_64':
    if cxx.target.platform == 'windows':
      bin64_folder_path = os.path.join('addons', EntityManager.plugin_name, 'bin', 'win64')
      bin64_folder = builder.AddFolder(bin64_folder_path)
    elif cxx.target.platform == 'linux':
      bin64_folder_path = os.path.join('addons', EntityManager.plugin_name, 'bin', 'linuxsteamrt64')
      bin64_folder = builder.AddFolder(bin64_folder_path)
    elif cxx.target.platform == 'mac':
      bin64_folder_path = os.path.join('addons', EntityManager.plugin_name, 'bin', 'osx64')
      bin64_folder = builder.AddFolder(bin64_folder_path)

pdb_list = []
for task in EntityManager.binaries:
  # This hardly assumes there's only 1 targetted platform and would be overwritten
  # with whatever comes last if multiple are used!
  with open(os.path.join(builder.buildPath, EntityManager.plugin_name + '.vdf'), 'w') as fp:
    fp.write('"Metamod Plugin"\n')
    fp.write('{\n')
    fp.write(f'\t"alias"\t"{EntityManager.plugin_alias}"\n')
    if task.target.arch == 'x86_64':
      fp.write(f'\t"file"\t"{os.path.join(bin64_folder_path, EntityManager.plugin_name)}"\n')
    else:
      fp.write(f'\t"file"\t"{os.path.join(bin_folder_path, EntityManager.plugin_name)}"\n')
    fp.write('}\n')

  if task.target.arch == 'x86_64':
    builder.AddCopy(task.binary, bin64_folder)
  else:
    builder.AddCopy(task.binary, bin_folder)

  if task.debug:
    pdb_list.append(task.debug)

builder.AddCopy(os.path.join(builder.buildPath, EntityManager.plugin_name + '.vdf'), metamod_folder)

# Generate PDB info.
with open(os.path.join(builder.buildPath, 'pdblog.txt'), 'wt') as fp:
  for line in pdb_list:
    fp.write(line.path + '\n')