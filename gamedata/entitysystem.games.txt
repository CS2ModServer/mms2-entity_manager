"Games"
{
	"cs2"
	{
		"Signatures"
		{
			// Used strings:
			// "Attempted to create unknown entity classname \"%s\"!\n"
			// 
			// Declaration: 
			// CEntityInstance *CEntitySystem::CreateEntity(
			//         CEntitySystem *const this,
			//         SpawnGroupHandle_t hSpawnGroup,
			//         const char *pszNameOrDesignName,
			//         EntityNetworkingMode_t networkMode,
			//         CEntityIndex iForcedIndex,
			//         int iForcedSerial,
			//         bool bCreateInIsolatedPrecacheList)
			// 
			// Type declarations:
			// enum EntityNetworkingMode_t
			// {
			// 	ENTITY_NETWORKING_MODE_DEFAULT = 0,
			// 	ENTITY_NETWORKING_MODE_NETWORKED,
			// 	ENTITY_NETWORKING_MODE_NOT_NETWORKED,
			// };
			// 
			// Basic usage:
			// (CBaseEntity *)CEntitySystem::CreateEntity(g_pEntitySystem, (SpawnGroupHandle_t)-1, pClassName, ENTITY_NETWORKING_MODE_DEFAULT, -1, -1, false);
			"CEntitySystem::CreateEntity"
			{
				"library"       "server"
				"windows64"     "48 8B C4 55 56 48 8B EC"
				"linux64"       "55 48 89 E5 41 57 4C 8D 7D C8 41 56 41 55 45 89 C5"
			}

			// Called in 
			// void CEntitySystem::QueueSpawnEntity(
			//          CEntitySystem *const this,
			//          CEntityInstance *pEntity,
			//          const CEntityKeyValues *pInitializationData)
			// {
			// 	CEntitySystem::QueueSpawnEntity(this, pEntity->m_pEntity, pInitializationData); // Our target.
			// }
			// This wrapping function is used where CVProfile::EnterScope(&g_VProfCurrentProfile, "Spawn", 0, "Server Simulation", 0, 4);
			// 
			// Declaration: 
			// void CEntitySystem::QueueSpawnEntity(
			//         CEntitySystem *const this,
			//         CEntityIdentity *pEntity, // ((CEntityInstance *)pEntity)->m_pEntity
			//         const CEntityKeyValues *pInitializationData)
			"CEntitySystem::QueueSpawnEntity"
			{
				"library"       "server"
				"windows64"     "40 56 57 41 56 48 83 EC 30"
				"linux64"       "55 48 89 E5 41 57 41 56 49 89 D6 41 55 49 89 FD 41 54 49 89 F4 53 48 83 EC 18 F6 46 31 08"
			}

			// Stacktrace use:
			//   UTIL_Remove(CEntityInstance *pBaseEnt)
			//     CEntitySystem::QueueDestroyEntity(CEntitySystem *const this, CEntityInstance *pEntity)
			//       CEntitySystem::QueueDestroyEntity(CEntitySystem *const this, CEntityIdentity *pEntity)
			// 
			// Declaration:
			// void CEntitySystem::QueueDestroyEntity(
			//          CEntitySystem *const this,
			//          CEntityIdentity *pEntity)
			"CEntitySystem::QueueDestroyEntity"
			{
				"library"       "server"
				"windows64"     "48 85 D2 0F 84 ? ? ? ? 57 48 83 EC 20 48 89 5C 24 ? 48 8B F9 48 8B 5A 10 48 85 DB"
				"linux64"       "48 85 F6 0F 84 ? ? ? ? 55 48 89 E5 41 55 49 89 FD 41 54 49 89 F4 53"
			}

			// Usually, pair calls with CEntitySystem::QueueSpawnEntity().
			// 
			// Declaration:
			// void CEntitySystem::ExecuteQueuedCreation(
			//         CEntitySystem *const this)
			"CEntitySystem::ExecuteQueuedCreation"
			{
				"library"       "server"
				"windows64"     "48 89 5C 24 08 57 48 81 EC 00 01 00 00 FF 81 C8 0B 00 00"
				"linux64"       "55 48 89 E5 41 56 41 55 41 54 49 89 FC 53 48 81 EC E0 00 00 00 0F 31"
			}

			// Used in CEntitySystem::QueueDestroyEntity().
			// 
			// Declaration:
			// void CEntitySystem::ExecuteQueuedDeletion(
			//          CEntitySystem *const this,
			//          bool bPerformDeallocation)
			"CEntitySystem::ExecuteQueuedDeletion"
			{
				"library"       "server"
				"windows64"     "88 54 24 10 48 89 4C 24 ? 55 41 55"
				"linux64"       "55 48 89 E5 41 57 49 89 FF 41 56 41 55 41 54 53 48 81 EC ? ? ? ? 40 88 B5 ? ? ? ? C7 87 ? ? ? ? ? ? ? ? 40 84 F6"
			}

			// Used in CC_Ent_Create().
			//   Near strings:
			//     "Usage:\n\t%s <subclassname> [additional arguments]\n"
			//     "\tBy default, additional arguments are of the form [{ \"key1\" \"value1\" \"key2\" \"value2\" }]\n"
			//     "\tWhen creating abilities, the additional argument is the primary ability name\n"
			//     "\tWhen creating modifiers, the additional arguments are additional keys of the form [{ \"key1\" \"value1\" \"key2\" \"value2\" }]\n"
			//     "kv 0x%p Release refcount == %d\n"
			//     "%s: Could not create unknown entity %s\n%s: Could not create unknown entity %s\n"
			//   Near virtual call: ray.m_pLoadingSpawnGroup->CreateEntityToSpawn(...)
			// 
			// Note (Windows): The function will not inline.

			// Declaration:
			// void CGameEntitySystem::ListenForEntityInSpawnGroupToFinish(
			//         CGameEntitySystem *const this,
			//         SpawnGroupHandle_t hSpawnGroup,
			//         CEntityInstance *pEntityToListenFor,
			//         const CEntityKeyValues *pKeyValues,
			//         CEntityInstance *pListener,
			//         CUtlDelegate<void (CEntityInstance *, CEntityKeyValues const*)> *handler)
			"CGameEntitySystem::ListenForEntityInSpawnGroupToFinish"
			{
				"library"       "server"
				"windows64"     "40 53 55 48 83 EC 48 48 89 7C 24 ? 49 8B E9"
				"linux64"       "55 48 89 E5 41 57 49 89 D7 41 56 49 89 CE 41 55 41 54 41 89 F4 53"
			}
		}

		"Offsets"
		{
			// Near strings (engine):
			//  "CGameResourceService::BuildResourceManifest(start)"
			//  "CGameResourceService::BuildResourceManifest(finish)"
			"CGameResourceService::m_pEntitySystem"
			{
				"windows64"     "0x58"
				"linux64"       "0x50"
			}

			// Used in CEntitySystem::BuildResourceManifest().
			// Field type is IEntityResourceManifest * .
			"CEntitySystem::m_pCurrentManifest"
			{
				"windows64"     "8"
				"linux64"       "8"
			}

			// Used in CSpawnGroupMgrGameSystem::SetActiveSpawnGroup()
			//   Near strings: 
			//     "%s:  CSpawnGroupMgrGameSystem::PerformActivateSpawnGroup(%s)\n" // The most.
			//     "SV"
			"CEntitySystem::m_ActiveSpawnGroupHandle"
			{
				"windows64"     "0x13B8"
				"linux64"       "0x13E0"
			}

			// Passes to CEntityKeyValues::CEntityKeyValues() as argument.
			"CEntitySystem::m_aKeyValuesMemoryPool"
			{
				"windows64"     "3280"
				"linux64"       "3304"
			}
		}
	}
}
