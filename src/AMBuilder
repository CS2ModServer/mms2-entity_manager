# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_name in EntityManager.sdks:
  for cxx in EntityManager.all_targets:
    sdk = EntityManager.sdks[sdk_name]

    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue

    dynlibutils_src = 'memory_utils'
    gamedata_src = 'gamedata'
    logger_src = 'logger'

    cxx.cxxincludes += [
      os.path.join(builder.currentSourcePath, 'entity_manager'),
      os.path.join(builder.currentSourcePath, dynlibutils_src),
      os.path.join(builder.currentSourcePath, gamedata_src),
      os.path.join(builder.currentSourcePath, logger_src),
    ]

    sdk_path_tp = os.path.join(sdk.path, 'thirdparty')
    for obj in os.listdir(sdk_path_tp):
        if obj.startswith('protobuf'):
          cxx.cxxincludes += [
            os.path.join(sdk_path_tp, obj, 'src')
          ]

    binary = EntityManager.HL2Library(builder, cxx, EntityManager.plugin_name, sdk)

    binary.sources += [
      os.path.join('entity_manager', 'provider', 'gamedata', 'entitysystem.cpp'),
      os.path.join('entity_manager', 'provider', 'gamedata', 'gameresource.cpp'),
      os.path.join('entity_manager', 'provider', 'gamedata', 'source2server.cpp'),
      os.path.join('entity_manager', 'provider', 'gamedata', 'spawngroup.cpp'),
      os.path.join('entity_manager', 'provider', 'entitysystem.cpp'),
      os.path.join('entity_manager', 'provider', 'source2server.cpp'),
      os.path.join('entity_manager', 'provider', 'gameresource.cpp'),
      os.path.join('entity_manager', 'provider', 'spawngroup.cpp'),
      os.path.join('entity_manager', 'provider_agent', 'resourcemanifest.cpp'),
      os.path.join('entity_manager', 'provider_agent', 'spawngroup.cpp'),
      os.path.join('entity_manager', 'provider.cpp'),
      os.path.join('entity_manager', 'provider_agent.cpp'),
      os.path.join('entity_manager', 'settings.cpp'),
      os.path.join('entity_manager.cpp'),

      # DynLibUtils tool
      os.path.join(dynlibutils_src, 'module.cpp'),

      # GameData tool
      os.path.join(gamedata_src, 'gamedata.cpp'),

      # Logger tool
      os.path.join(logger_src, 'logger', 'detailed.cpp'),
      os.path.join(logger_src, 'logger', 'message.cpp'),
      os.path.join(logger_src, 'logger', 'warning.cpp'),
      os.path.join(logger_src, 'logger', 'throw_assert.cpp'),
      os.path.join(logger_src, 'logger', 'error.cpp'),
      os.path.join(logger_src, 'logger', 'scope.cpp'),
      os.path.join(logger_src, 'logger.cpp'),
    ]

    if sdk_name in ['dota', 'cs2']:
      binary.sources += [
        os.path.join(sdk.path, 'public', 'tier0', 'memoverride.cpp'),
        os.path.join(sdk.path, 'entity2', 'entityidentity.cpp'),
        os.path.join(sdk.path, 'entity2', 'entitysystem.cpp'),
        os.path.join(sdk.path, 'entity2', 'entitykeyvalues.cpp'),
      ]

    if cxx.target.arch == 'x86':
      binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']
    nodes = builder.Add(binary)
    EntityManager.binaries += [nodes]
    
  break
